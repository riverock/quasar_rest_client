#!/usr/bin/env ruby

require "bundler/setup"
require "quasar_rest_client"
require "logger"
require 'ostruct'

### BEGIN_SCRUB
$live_test = OpenStruct.new({
    endpoint_host: '-',
    endpoint_port: 20223,
    mount: '-',
    parent: '-',
    collection: '-',
    new_collection: '-',
    where_clause: '-',
    logger: Logger.new($stderr)
  })
### END_SCRUB

$live_test.collection_path = ["", $live_test.mount, $live_test.parent, $live_test.collection].join('/')
$live_test.new_collection_path = ["", $live_test.mount, $live_test.parent, $live_test.new_collection].join('/')
$live_test.endpoint = "http://#{$live_test.endpoint_host}:#{$live_test.endpoint_port}"
$live_test.sql_format = "SELECT %s FROM `#{$live_test.collection_path}` WHERE #{$live_test.where_clause}"
$live_test.sql_count = $live_test.sql_format % "count(*)"
$live_test.sql_fetch = $live_test.sql_format % "*"

QuasarRestClient.config.endpoint = $live_test.endpoint
QuasarRestClient.config.logger = $live_test.logger

$live_test.count_resp  = QuasarRestClient.simple_query($live_test.sql_count)
$live_test.fetch_resp  = QuasarRestClient.simple_query($live_test.sql_fetch, limit: 2)
$live_test.long_resp   = QuasarRestClient.long_query($live_test.sql_fetch, $live_test.new_collection_path)
$live_test.get_resp    = QuasarRestClient.get_data($live_test.new_collection_path, limit: 2)
$live_test.delete_resp = QuasarRestClient.delete_data($live_test.new_collection_path)

puts
puts "Count:"
puts "  response code: #{$live_test.count_resp.code}"
puts "  body length:   #{$live_test.count_resp.body.length}"
puts "  body parsed:   #{JSON.pretty_generate(JSON.parse($live_test.count_resp.body))}"

puts
puts "Fetch:"
puts "  response code: #{$live_test.fetch_resp.code}"
puts "  body length:   #{$live_test.fetch_resp.body.length}"
puts "  body parsed:   #{JSON.pretty_generate(JSON.parse($live_test.fetch_resp.body))[0..500]}"

puts
puts "Long:"
puts "  response code: #{$live_test.long_resp.code}"
puts "  body length:   #{$live_test.long_resp.body.length}"
puts "  body parsed:   #{JSON.pretty_generate(JSON.parse($live_test.long_resp.body))[0..500]}"

puts
puts "Get:"
puts "  response code: #{$live_test.get_resp.code}"
puts "  body length:   #{$live_test.get_resp.body.length}"
puts "  body parsed:   #{JSON.pretty_generate(JSON.parse($live_test.get_resp.body))[0..500]}"
puts "  same as fetch? #{$live_test.get_resp.body == $live_test.fetch_resp.body}"

puts
puts "Delete:"
puts "  response code: #{$live_test.delete_resp.code}"
puts "  body is nil?:  #{$live_test.delete_resp.body.nil?.inspect}"

puts
puts "Done"
